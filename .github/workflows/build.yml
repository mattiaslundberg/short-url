# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Start Redis
        uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: 6

      - run: cd backend && npm ci
      - run: cd backend && npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: claudia-cache
        with:
          path: backend/claudia.json
          key: ${{ runner.os }}-v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Install frontend deps
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Copy frontend for distribution
        run: cp -r frontend/public backend/

      - run: cd backend && npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Destroy claudia
        # if: steps.claudia-cache.outputs.cache-hit == 'true'
        run: cd backend && npx claudia destroy

      # - name: Destroy redis instance
      #   if: steps.claudia-cache.outputs.cache-hit == 'true'
      #   run: aws elasticache delete-cache-cluster --cache-cluster-id shorturl

      - name: Setup redis instance
        if: steps.claudia-cache.outputs.cache-hit != 'true'
        run: aws elasticache create-cache-cluster --cache-cluster-id shorturl --engine redis --region eu-north-1 --cache-node-type cache.t3.micro --num-cache-nodes 1 || true

      - name: Get redis endpoint
        id: redis
        run: echo "::set-output name=redis-url::$(aws elasticache describe-cache-clusters --region eu-north-1 --cache-cluster-id shorturl --show-cache-node-info | jq '.CacheClusters[].CacheNodes[].Endpoint.Address')"

      - name: Setup new lambda handler
        # if: steps.claudia-cache.outputs.cache-hit != 'true'
        run: cd backend && npx claudia create --handler lambda.handler --deploy-proxy-api --region eu-north-1 --set-env REDIS_URL=${{ steps.redis.outputs.redis-url }} --security-group-ids sg-079b962b5246bb104 --subnet-ids subnet-29e00840,subnet-316d587b,subnet-6b343f13 || true

      - name: Deploy lambda
        # if: steps.claudia-cache.outputs.cache-hit == 'true'
        run: cd backend && npx claudia update --set-env REDIS_URL=${{ steps.redis.outputs.redis-url }}
